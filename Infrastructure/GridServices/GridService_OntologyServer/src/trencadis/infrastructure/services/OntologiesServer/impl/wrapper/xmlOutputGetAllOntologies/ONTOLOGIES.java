package trencadis.infrastructure.services.OntologiesServer.impl.wrapper.xmlOutputGetAllOntologies;/*******************************************************************  *********** CLASE GENERADA AUTOM�TICAMENTE POR XMLWRAPPER **********  ********-----Germ�n Molt� Mart�nez (gmolto@dsic.upv.es) -----*******  ********************************************************************/import org.w3c.dom.*;/** * Contiene los metodos que permiten obtener y cambiar la informacion de los * elementos <STRONG>ONTOLOGIES </STRONG> del documento XML. */public class ONTOLOGIES extends Wrapper {	/**	 * Crea un Wrapper que trabajara a partir de un elemento ONTOLOGIES	 * 	 * @param e El elemento sobre el cual trabaja el Wrapper	 */	public ONTOLOGIES(Element e) {		super(e);	}	/**	 * Permite iterar por todos los elementos ONTOLOGY	 * 	 * @return Un java.util.iterator para facilitar la iteraci�n <BR>	 *         Ejemplo de uso: <BR>	 *         Iterator it = getAll_ONTOLOGY(); <BR>	 *         while (it.hasNext()){ <BR>	 *         <UL>	 *         ONTOLOGY obj = (ONTOLOGY) it.next(); <BR>	 *         }	 */	public java.util.Iterator<ONTOLOGY> getAll_ONTOLOGY() {		java.util.Vector<ONTOLOGY> v = getChildsByTagName("ONTOLOGY");		int length = v.size();		for (int i = 0; i < length; i++) {			v.setElementAt(new ONTOLOGY((Element) v.elementAt(i)), i);		}		return v.iterator();	}	/**	 * Añade un nuevo elemento ONTOLOGY. El contenido del nuevo elemento es	 * vacio y debera ser establecido mediante los metodos del wrapper obtenido	 * 	 * @return Un wrapper al nuevo elemento introducido	 */	public ONTOLOGY add_ONTOLOGY() {		Element newONTOLOGY = doc.createElement("ONTOLOGY");		elem.appendChild(newONTOLOGY);		return new ONTOLOGY(newONTOLOGY);	}	}