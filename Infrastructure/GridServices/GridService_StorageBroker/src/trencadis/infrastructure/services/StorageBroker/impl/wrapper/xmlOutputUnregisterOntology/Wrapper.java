package trencadis.infrastructure.services.StorageBroker.impl.wrapper.xmlOutputUnregisterOntology;/*******************************************************************  *********** AUTOMATICALLY GENERATED CLASS BY XmlWrappers  **********  ********-----German Molto  (gmolto@dsic.upv.es) -----*******  ********************************************************************/ import org.w3c.dom.*;import java.io.*;import org.apache.xml.serialize.OutputFormat;import org.apache.xml.serialize.XMLSerializer;import java.io.Serializable;public class Wrapper implements Serializable {/** * Elemento a partir del cual todo wrapper trabaja*/  protected org.w3c.dom.Element elem; protected org.w3c.dom.Document doc;/** * Creates a Wrapper that works from an element * @param e The org.w3c.dom.Element base for the Wrapper */ public Wrapper(org.w3c.dom.Element e){   elem=e;  doc=e.getOwnerDocument(); } public Wrapper(){}/** * Returns the element with a certain tag which is a direct children of the element  * this wrapper works with. * @param name The name of the element you are looking for * @return The obtained element */protected org.w3c.dom.Element getElementByTagName(String name){try{ NodeList nl = elem.getChildNodes(); for ( int i = 0; i < nl.getLength() ; i++ ){  Node n = nl.item(i);  if ((n.getNodeType() == Node.ELEMENT_NODE) && n.getNodeName().equalsIgnoreCase(name))    return (Element) n ; }//forreturn null;}catch(Exception e) {e.printStackTrace(); return null;}}/** * Get a set of elements that are direct children of the element  * this wrapper works with, and with a certain name.  * @param name The name of the elements to be searched  * @return A java.util.Vector with the elements found  */protected java.util.Vector getChildsByTagName(String name){ return getChildsByTagName( elem , name );}/** * Get a set of elements that are direct children of the element  * of a given node * @param node The node, whose children we want to look for * @param name The name of the elements to be searched  * @return A java.util.Vector with the elements found */protected java.util.Vector getChildsByTagName(org.w3c.dom.Node node, String name){ java.util.Vector v = new java.util.Vector(); try{ NodeList nl = node.getChildNodes(); int length = nl.getLength(); for (int i = 0; i < length ; i++){  Node n = nl.item(i);  if ( (n.getNodeType() == Node.ELEMENT_NODE) && n.getNodeName().equalsIgnoreCase(name))     v.addElement(n);}//forreturn v;}catch(Exception e) {e.printStackTrace(); return null;}}/** * Get the value of an element which is a child of the element   * this wrapper works with * @param name The element name  * @return The value of the text node of the element  */protected String getValueByTagName(String name){  Element el = getElementByTagName(name);  return el.getFirstChild().getNodeValue();}/** * Sets the value of an element, child of the element this  * wrapper works with * @param name The name of the element * @param value The new value of the element */protected void setValueByTagName(String name, String value){ Element el = getElementByTagName(name);  el.getFirstChild().setNodeValue(value); }public String str_to_XML(){ try{  StringWriter out = new StringWriter();  OutputFormat format = new OutputFormat(doc,"UTF-8",true);  XMLSerializer s = new XMLSerializer(out,format);  s.serialize(elem);  return out.getBuffer().toString(); }catch(Exception ex){  ex.printStackTrace(); return null; }}}