package trencadis.infrastructure.services.StorageBroker.impl.wrapper.config;/*******************************************************************  *********** AUTOMATICALLY GENERATED CLASS BY XmlWrappers  **********  ********-----German Molto  (gmolto@dsic.upv.es) -----*******  ********************************************************************/ import org.w3c.dom.*;/** * Contains the methods that allow to obtain and change the information of * the elements <STRONG>DATABASE_PARAMETERS </STRONG> from the XML document. */public class DATABASE_PARAMETERS extends Wrapper{/** * Creates a Wrapper that works starting from the element DATABASE_PARAMETERS * @param e The elemenent the Wrapper works with*/public DATABASE_PARAMETERS(Element e){ super(e);}/** * Obtains the value of element HOST_NAME * @return The value of element HOST_NAME */public String get_HOST_NAME(){ try { String unparsedValue = getValueByTagName("HOST_NAME"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element HOST_NAME * If the element does not exist it is automatically created * @param value The new value of element HOST_NAME * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_HOST_NAME(String value){ String unparsedValue = value; try{ setValueByTagName("HOST_NAME", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("HOST_NAME");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtains the value of element HOST_PORT * @return The value of element HOST_PORT */public String get_HOST_PORT(){ try { String unparsedValue = getValueByTagName("HOST_PORT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element HOST_PORT * If the element does not exist it is automatically created * @param value The new value of element HOST_PORT * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_HOST_PORT(String value){ String unparsedValue = value; try{ setValueByTagName("HOST_PORT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("HOST_PORT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtains the value of element DB_NAME * @return The value of element DB_NAME */public String get_DB_NAME(){ try { String unparsedValue = getValueByTagName("DB_NAME"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element DB_NAME * If the element does not exist it is automatically created * @param value The new value of element DB_NAME * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_DB_NAME(String value){ String unparsedValue = value; try{ setValueByTagName("DB_NAME", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("DB_NAME");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtains the value of element USER * @return The value of element USER */public String get_USER(){ try { String unparsedValue = getValueByTagName("USER"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element USER * If the element does not exist it is automatically created * @param value The new value of element USER * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_USER(String value){ String unparsedValue = value; try{ setValueByTagName("USER", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("USER");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtains the value of element PASSWORD * @return The value of element PASSWORD */public String get_PASSWORD(){ try { String unparsedValue = getValueByTagName("PASSWORD"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element PASSWORD * If the element does not exist it is automatically created * @param value The new value of element PASSWORD * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_PASSWORD(String value){ String unparsedValue = value; try{ setValueByTagName("PASSWORD", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("PASSWORD");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}}