package trencadis.infrastructure.services.StorageBroker.impl.wrapper.config;/*******************************************************************  *********** AUTOMATICALLY GENERATED CLASS BY XmlWrappers  **********  ********-----German Molto  (gmolto@dsic.upv.es) -----*******  ********************************************************************/ import org.w3c.dom.*;/** * Contains the methods that allow to obtain and change the information of * the elements <STRONG>LOCAL_PARAMETERS </STRONG> from the XML document. */public class LOCAL_PARAMETERS extends Wrapper{/** * Creates a Wrapper that works starting from the element LOCAL_PARAMETERS * @param e The elemenent the Wrapper works with*/public LOCAL_PARAMETERS(Element e){ super(e);}/** * Obtains the value of element BASE_PATH * @return The value of element BASE_PATH */public String get_BASE_PATH(){ try { String unparsedValue = getValueByTagName("BASE_PATH"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element BASE_PATH * If the element does not exist it is automatically created * @param value The new value of element BASE_PATH * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_BASE_PATH(String value){ String unparsedValue = value; try{ setValueByTagName("BASE_PATH", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("BASE_PATH");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtains the value of element PATH_CATTRUSTCERT * @return The value of element PATH_CATTRUSTCERT */public String get_PATH_CATTRUSTCERT(){ try { String unparsedValue = getValueByTagName("PATH_CATTRUSTCERT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element PATH_CATTRUSTCERT * If the element does not exist it is automatically created * @param value The new value of element PATH_CATTRUSTCERT * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_PATH_CATTRUSTCERT(String value){ String unparsedValue = value; try{ setValueByTagName("PATH_CATTRUSTCERT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("PATH_CATTRUSTCERT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtains the value of element TMP_DIR * @return The value of element TMP_DIR */public String get_TMP_DIR(){ try { String unparsedValue = getValueByTagName("TMP_DIR"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element TMP_DIR * If the element does not exist it is automatically created * @param value The new value of element TMP_DIR * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_TMP_DIR(String value){ String unparsedValue = value; try{ setValueByTagName("TMP_DIR", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("TMP_DIR");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtains the value of element POLL_INTERVAL * @return The value of element POLL_INTERVAL */public String get_POLL_INTERVAL(){ try { String unparsedValue = getValueByTagName("POLL_INTERVAL"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element POLL_INTERVAL * If the element does not exist it is automatically created * @param value The new value of element POLL_INTERVAL * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_POLL_INTERVAL(String value){ String unparsedValue = value; try{ setValueByTagName("POLL_INTERVAL", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("POLL_INTERVAL");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}}