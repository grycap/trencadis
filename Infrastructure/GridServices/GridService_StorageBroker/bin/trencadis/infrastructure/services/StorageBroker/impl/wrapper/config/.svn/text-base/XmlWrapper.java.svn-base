package trencadis.infrastructure.services.StorageBroker.impl.wrapper.config;import org.w3c.dom.*;import java.io.*;import org.apache.xerces.parsers.DOMParser;import org.apache.xml.serialize.OutputFormat;import org.apache.xml.serialize.XMLSerializer;public class XmlWrapper extends Wrapper { private String fileName; Document doc = null; private boolean inValidationMode;/** * Creates a Wrapper for the XML document. It will be an entry point to the document,  * as acess will be provided from here to the root element of the XML document * @param filename The XML file name  */ public XmlWrapper(File file, boolean inValidationMode){  this.fileName = file.getAbsolutePath();   this.inValidationMode = inValidationMode;  }/** * Creates a Wrapper for the XML document. It will be an entry point to the document,  * as acess will be provided from here to the root element of the XML document * @param filename The XML file name  */ public XmlWrapper(String xmlDocument, boolean inValidationMode){  try{   File f = File.createTempFile("XmlWrapper",".xml");   this.fileName = f.getAbsolutePath();   FileOutputStream os = new FileOutputStream(f);   os.write(xmlDocument.getBytes());   os.close();   }catch(IOException ex){    System.err.println("Unable to create file: " + fileName);   }   this.inValidationMode = inValidationMode; }/** * Starts the XML document parsing in validation mode (checks  * that the XML document satisfies the Schema. If required, shows the errors * Besides, it obtains the root element of the document. * @param filename The XML file name.                               * @return false if an error occurs during parsing.       */ public boolean wrap(){  return wrap(this.fileName, this.inValidationMode);  }/** * Parses the XML document in validation mode (checks that  * the XML document satisfies the Schema. If required, shows the errors * Besides, it obtains the root element of the document. * @param filename The XML file name.                               * @inValidationMode A boolean to indicate if the document should be read in validation mode. * @return false if an error occurs during parsing.       */ private boolean wrap(String filename, boolean inValidationMode){  try {   DOMParser parser = new DOMParser();   if (inValidationMode) {   parser.setFeature("http://xml.org/sax/features/validation", true);   parser.setFeature("http://apache.org/xml/features/validation/schema", true);   parser.setProperty("http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation", "storageBrokerConfig.xsd");   }   parser.setErrorHandler(new CustomErrorHandler());   parser.parse(filename);   doc = parser.getDocument();  }catch(Exception sxe){   return false;  } elem = doc.getDocumentElement();  return true;}/** * Obtains the current XML document (perhaps after the modifications * you made) in the form of a String * @return The current XML document as a String   */public String to_XMLString(){ String xmlCode=null; File f = null; try{  f = File.createTempFile("XmlWrapper",".xml");  to_XML(f.getAbsolutePath());  xmlCode = fileToString(f.getAbsolutePath()); }catch(IOException ex){  System.err.println(ex.getMessage());  return null; } return xmlCode;}/** * Obtains a String representation of a text file * @return The text file as a String   */private String fileToString(String textFilePath) throws IOException{ FileInputStream fis = new FileInputStream(textFilePath); byte[] b = new byte[fis.available()]; fis.read(b); fis.close(); return new String(b);}/** * Stores the changes in the same XML document */public void to_XML(){  to_XML(fileName);}/** * Stores the changes in an XML document * @param filename The name of the file */ public void to_XML(String filename){ try{  FileOutputStream out = new FileOutputStream(filename);   OutputFormat format = new OutputFormat(doc, "UTF-8", true);   XMLSerializer s = new XMLSerializer(out,format);  s.serialize(doc); }catch(Exception e) {e.printStackTrace();} }/** * Verifies that all the changes produces to DOM satisfy the Schema * @return True If the current DOM is coherent with the schema. *         False if any modification violates the schema. *         A description of the error will be shown. */public boolean validate(){  to_XML(fileName + ".tmp.xml");  if (!wrap(fileName + ".tmp.xml", true)) return false;  else return true;} /************* Entry methods to XML document *************//** * Obtains the value of element VO_DEFAULT_SE * @return The value of element VO_DEFAULT_SE */public String get_VO_DEFAULT_SE(){ try { String unparsedValue = getValueByTagName("VO_DEFAULT_SE"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element VO_DEFAULT_SE * If the element does not exist it is automatically created * @param value The new value of element VO_DEFAULT_SE * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_VO_DEFAULT_SE(String value){ String unparsedValue = value; try{ setValueByTagName("VO_DEFAULT_SE", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("VO_DEFAULT_SE");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element VO_DEFAULT_SE and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_VO_DEFAULT_SE(){ try{  Element e = getElementByTagName("VO_DEFAULT_SE");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element TMP_DIR * @return The value of element TMP_DIR */public String get_TMP_DIR(){ try { String unparsedValue = getValueByTagName("TMP_DIR"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element TMP_DIR * If the element does not exist it is automatically created * @param value The new value of element TMP_DIR * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_TMP_DIR(String value){ String unparsedValue = value; try{ setValueByTagName("TMP_DIR", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("TMP_DIR");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element TMP_DIR and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_TMP_DIR(){ try{  Element e = getElementByTagName("TMP_DIR");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains a Wrapper to work from the element DATABASE_PARAMETERS * @param value The Wrapper obtained */ public DATABASE_PARAMETERS get_DATABASE_PARAMETERS(){   return new DATABASE_PARAMETERS(elem);}/** * Obtains the value of element LFC_HOME * @return The value of element LFC_HOME */public String get_LFC_HOME(){ try { String unparsedValue = getValueByTagName("LFC_HOME"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element LFC_HOME * If the element does not exist it is automatically created * @param value The new value of element LFC_HOME * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_LFC_HOME(String value){ String unparsedValue = value; try{ setValueByTagName("LFC_HOME", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("LFC_HOME");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element LFC_HOME and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_LFC_HOME(){ try{  Element e = getElementByTagName("LFC_HOME");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element HOST_PORT * @return The value of element HOST_PORT */public String get_HOST_PORT(){ try { String unparsedValue = getValueByTagName("HOST_PORT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element HOST_PORT * If the element does not exist it is automatically created * @param value The new value of element HOST_PORT * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_HOST_PORT(String value){ String unparsedValue = value; try{ setValueByTagName("HOST_PORT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("HOST_PORT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element HOST_PORT and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_HOST_PORT(){ try{  Element e = getElementByTagName("HOST_PORT");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element USER * @return The value of element USER */public String get_USER(){ try { String unparsedValue = getValueByTagName("USER"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element USER * If the element does not exist it is automatically created * @param value The new value of element USER * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_USER(String value){ String unparsedValue = value; try{ setValueByTagName("USER", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("USER");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element USER and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_USER(){ try{  Element e = getElementByTagName("USER");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element LCG_GFAL_VO * @return The value of element LCG_GFAL_VO */public String get_LCG_GFAL_VO(){ try { String unparsedValue = getValueByTagName("LCG_GFAL_VO"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element LCG_GFAL_VO * If the element does not exist it is automatically created * @param value The new value of element LCG_GFAL_VO * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_LCG_GFAL_VO(String value){ String unparsedValue = value; try{ setValueByTagName("LCG_GFAL_VO", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("LCG_GFAL_VO");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element LCG_GFAL_VO and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_LCG_GFAL_VO(){ try{  Element e = getElementByTagName("LCG_GFAL_VO");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element LCG_GFAL_INFOSYS * @return The value of element LCG_GFAL_INFOSYS */public String get_LCG_GFAL_INFOSYS(){ try { String unparsedValue = getValueByTagName("LCG_GFAL_INFOSYS"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element LCG_GFAL_INFOSYS * If the element does not exist it is automatically created * @param value The new value of element LCG_GFAL_INFOSYS * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_LCG_GFAL_INFOSYS(String value){ String unparsedValue = value; try{ setValueByTagName("LCG_GFAL_INFOSYS", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("LCG_GFAL_INFOSYS");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element LCG_GFAL_INFOSYS and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_LCG_GFAL_INFOSYS(){ try{  Element e = getElementByTagName("LCG_GFAL_INFOSYS");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element DB_NAME * @return The value of element DB_NAME */public String get_DB_NAME(){ try { String unparsedValue = getValueByTagName("DB_NAME"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element DB_NAME * If the element does not exist it is automatically created * @param value The new value of element DB_NAME * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_DB_NAME(String value){ String unparsedValue = value; try{ setValueByTagName("DB_NAME", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("DB_NAME");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element DB_NAME and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_DB_NAME(){ try{  Element e = getElementByTagName("DB_NAME");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element URL_IIS_CENTRAL * @return The value of element URL_IIS_CENTRAL */public String get_URL_IIS_CENTRAL(){ try { String unparsedValue = getValueByTagName("URL_IIS_CENTRAL"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element URL_IIS_CENTRAL * If the element does not exist it is automatically created * @param value The new value of element URL_IIS_CENTRAL * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_URL_IIS_CENTRAL(String value){ String unparsedValue = value; try{ setValueByTagName("URL_IIS_CENTRAL", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("URL_IIS_CENTRAL");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element URL_IIS_CENTRAL and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_URL_IIS_CENTRAL(){ try{  Element e = getElementByTagName("URL_IIS_CENTRAL");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element POLL_INTERVAL * @return The value of element POLL_INTERVAL */public String get_POLL_INTERVAL(){ try { String unparsedValue = getValueByTagName("POLL_INTERVAL"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element POLL_INTERVAL * If the element does not exist it is automatically created * @param value The new value of element POLL_INTERVAL * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_POLL_INTERVAL(String value){ String unparsedValue = value; try{ setValueByTagName("POLL_INTERVAL", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("POLL_INTERVAL");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element POLL_INTERVAL and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_POLL_INTERVAL(){ try{  Element e = getElementByTagName("POLL_INTERVAL");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains a Wrapper to work from the element LFC_PARAMETERS * @param value The Wrapper obtained */ public LFC_PARAMETERS get_LFC_PARAMETERS(){   return new LFC_PARAMETERS(elem);}/** * Obtains the value of element VO * @return The value of element VO */public String get_VO(){ try { String unparsedValue = getValueByTagName("VO"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element VO * If the element does not exist it is automatically created * @param value The new value of element VO * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_VO(String value){ String unparsedValue = value; try{ setValueByTagName("VO", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("VO");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element VO and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_VO(){ try{  Element e = getElementByTagName("VO");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element REGISTRATION_PATH * @return The value of element REGISTRATION_PATH */public String get_REGISTRATION_PATH(){ try { String unparsedValue = getValueByTagName("REGISTRATION_PATH"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element REGISTRATION_PATH * If the element does not exist it is automatically created * @param value The new value of element REGISTRATION_PATH * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_REGISTRATION_PATH(String value){ String unparsedValue = value; try{ setValueByTagName("REGISTRATION_PATH", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("REGISTRATION_PATH");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element REGISTRATION_PATH and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_REGISTRATION_PATH(){ try{  Element e = getElementByTagName("REGISTRATION_PATH");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element PATH_CATTRUSTCERT * @return The value of element PATH_CATTRUSTCERT */public String get_PATH_CATTRUSTCERT(){ try { String unparsedValue = getValueByTagName("PATH_CATTRUSTCERT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element PATH_CATTRUSTCERT * If the element does not exist it is automatically created * @param value The new value of element PATH_CATTRUSTCERT * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_PATH_CATTRUSTCERT(String value){ String unparsedValue = value; try{ setValueByTagName("PATH_CATTRUSTCERT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("PATH_CATTRUSTCERT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element PATH_CATTRUSTCERT and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_PATH_CATTRUSTCERT(){ try{  Element e = getElementByTagName("PATH_CATTRUSTCERT");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element PASSWORD * @return The value of element PASSWORD */public String get_PASSWORD(){ try { String unparsedValue = getValueByTagName("PASSWORD"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element PASSWORD * If the element does not exist it is automatically created * @param value The new value of element PASSWORD * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_PASSWORD(String value){ String unparsedValue = value; try{ setValueByTagName("PASSWORD", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("PASSWORD");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element PASSWORD and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_PASSWORD(){ try{  Element e = getElementByTagName("PASSWORD");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element BASE_PATH * @return The value of element BASE_PATH */public String get_BASE_PATH(){ try { String unparsedValue = getValueByTagName("BASE_PATH"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element BASE_PATH * If the element does not exist it is automatically created * @param value The new value of element BASE_PATH * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_BASE_PATH(String value){ String unparsedValue = value; try{ setValueByTagName("BASE_PATH", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("BASE_PATH");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element BASE_PATH and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_BASE_PATH(){ try{  Element e = getElementByTagName("BASE_PATH");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains a Wrapper to work from the element GATEKEEPER * @param value The Wrapper obtained */ public GATEKEEPER get_GATEKEEPER(){   return new GATEKEEPER(elem);}/** * Obtains a Wrapper to work from the element AMGA_PARAMETERS * @param value The Wrapper obtained */ public AMGA_PARAMETERS get_AMGA_PARAMETERS(){   return new AMGA_PARAMETERS(elem);}/** * Obtains a Wrapper to work from the element CONFIGURATION * @param value The Wrapper obtained */ public CONFIGURATION get_CONFIGURATION(){   return new CONFIGURATION(elem);}/** * Obtains the value of element LCG_CATALOG_TYPE * @return The value of element LCG_CATALOG_TYPE */public String get_LCG_CATALOG_TYPE(){ try { String unparsedValue = getValueByTagName("LCG_CATALOG_TYPE"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element LCG_CATALOG_TYPE * If the element does not exist it is automatically created * @param value The new value of element LCG_CATALOG_TYPE * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_LCG_CATALOG_TYPE(String value){ String unparsedValue = value; try{ setValueByTagName("LCG_CATALOG_TYPE", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("LCG_CATALOG_TYPE");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element LCG_CATALOG_TYPE and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_LCG_CATALOG_TYPE(){ try{  Element e = getElementByTagName("LCG_CATALOG_TYPE");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element REMOTE_HOME * @return The value of element REMOTE_HOME */public String get_REMOTE_HOME(){ try { String unparsedValue = getValueByTagName("REMOTE_HOME"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element REMOTE_HOME * If the element does not exist it is automatically created * @param value The new value of element REMOTE_HOME * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_REMOTE_HOME(String value){ String unparsedValue = value; try{ setValueByTagName("REMOTE_HOME", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("REMOTE_HOME");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element REMOTE_HOME and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_REMOTE_HOME(){ try{  Element e = getElementByTagName("REMOTE_HOME");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains the value of element HOST_NAME * @return The value of element HOST_NAME */public String get_HOST_NAME(){ try { String unparsedValue = getValueByTagName("HOST_NAME"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element HOST_NAME * If the element does not exist it is automatically created * @param value The new value of element HOST_NAME * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_HOST_NAME(String value){ String unparsedValue = value; try{ setValueByTagName("HOST_NAME", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("HOST_NAME");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element HOST_NAME and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_HOST_NAME(){ try{  Element e = getElementByTagName("HOST_NAME");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains a Wrapper to work from the element LOCAL_PARAMETERS * @param value The Wrapper obtained */ public LOCAL_PARAMETERS get_LOCAL_PARAMETERS(){   return new LOCAL_PARAMETERS(elem);}/** * Obtains the value of element LCG_RFIO_TYPE * @return The value of element LCG_RFIO_TYPE */public String get_LCG_RFIO_TYPE(){ try { String unparsedValue = getValueByTagName("LCG_RFIO_TYPE"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element LCG_RFIO_TYPE * If the element does not exist it is automatically created * @param value The new value of element LCG_RFIO_TYPE * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_LCG_RFIO_TYPE(String value){ String unparsedValue = value; try{ setValueByTagName("LCG_RFIO_TYPE", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("LCG_RFIO_TYPE");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element LCG_RFIO_TYPE and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_LCG_RFIO_TYPE(){ try{  Element e = getElementByTagName("LCG_RFIO_TYPE");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }/** * Obtains a Wrapper to work from the element INDEX_SERVICE * @param value The Wrapper obtained */ public INDEX_SERVICE get_INDEX_SERVICE(){   return new INDEX_SERVICE(elem);}/** * Obtains the value of element LFC_HOST * @return The value of element LFC_HOST */public String get_LFC_HOST(){ try { String unparsedValue = getValueByTagName("LFC_HOST"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Sets the value to element LFC_HOST * If the element does not exist it is automatically created * @param value The new value of element LFC_HOST * @throws IllegalArgumentException If the value violates *         any scheme restriction */public void set_LFC_HOST(String value){ String unparsedValue = value; try{ setValueByTagName("LFC_HOST", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("LFC_HOST");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Erases the element LFC_HOST and its descendants * @throws java.util.NoSuchElementException If there specified element *           is not found * @throws IllegalStateException If the schema disallows erasing the element */ public void del_LFC_HOST(){ try{  Element e = getElementByTagName("LFC_HOST");  e.getParentNode().removeChild(e);  }catch(Exception ex){ throw new java.util.NoSuchElementException(" Se ha intentado borrar un elemento inexistente");} }}/** * Class that provides a personalised handling of errors ocurred * while analysing the XML documents. */class CustomErrorHandler implements org.xml.sax.ErrorHandler{ public void warning(org.xml.sax.SAXParseException exception) throws org.xml.sax.SAXException {   System.out.println(">> Warning << " +   "  Linea: " +   exception.getLineNumber() + " " +    "  Archivo:     " +   exception.getSystemId() + " " +   "  Mensaje: " +   exception.getMessage()); throw new org.xml.sax.SAXException("Warning  ");} public void error(org.xml.sax.SAXParseException exception) throws org.xml.sax.SAXException {   System.out.println(">> Error de Sintaxis << " +   "  Linea: " +   exception.getLineNumber() + " " +    "  Archivo:     " +   exception.getSystemId() + " " +   "  Mensaje: " +   exception.getMessage()); throw new org.xml.sax.SAXException("Error de Sintaxis");} public void fatalError(org.xml.sax.SAXParseException exception) throws org.xml.sax.SAXException {   System.out.println(">> Error Fatal << " +   "  Linea: " +   exception.getLineNumber() + " " +    "  Archivo:     " +   exception.getSystemId() + " " +   "  Mensaje: " +   exception.getMessage()); throw new org.xml.sax.SAXException("Error fatal"); }}