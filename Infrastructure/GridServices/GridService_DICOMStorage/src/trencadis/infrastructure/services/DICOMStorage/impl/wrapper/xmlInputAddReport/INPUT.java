package trencadis.infrastructure.services.DICOMStorage.impl.wrapper.xmlInputAddReport;/*******************************************************************  *********** CLASE GENERADA AUTOM�TICAMENTE POR XMLWRAPPER **********  ********-----Germ�n Molt� Mart�nez (gmolto@dsic.upv.es) -----*******  ********************************************************************/ import org.w3c.dom.*;/** * Contiene los m�todos que permiten obtener y cambiar la informaci�n * de los elementos <STRONG>INPUT </STRONG> del documento XML. */public class INPUT extends Wrapper{/** * Crea un Wrapper que trabajar� a partir de un elemento INPUT * @param e El elemento sobre el cual trabaja el Wrapper*/public INPUT(Element e){ super(e);}/** * Obtiene el valor del elemento CERTIFICATE * @return El valor del elemento CERTIFICATE */public String get_CERTIFICATE(){ try { String unparsedValue = getValueByTagName("CERTIFICATE"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento CERTIFICATE * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento CERTIFICATE * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_CERTIFICATE(String value){ String unparsedValue = value; try{ setValueByTagName("CERTIFICATE", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("CERTIFICATE");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento IDONTOLOGY * @return El valor del elemento IDONTOLOGY */public String get_IDONTOLOGY(){ try { String unparsedValue = getValueByTagName("IDONTOLOGY"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento IDONTOLOGY * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento IDONTOLOGY * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_IDONTOLOGY(String value){ String unparsedValue = value; try{ setValueByTagName("IDONTOLOGY", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("IDONTOLOGY");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento IDREPORT * @return El valor del elemento IDREPORT */public String get_IDTRENCADISREPORT(){ try { String unparsedValue = getValueByTagName("IDTRENCADISREPORT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento IDREPORT * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento IDREPORT * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_IDTRENCADISREPORT(String value){ String unparsedValue = value; try{ setValueByTagName("IDREPORT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("IDTRENCADISREPORT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene un Wrapper a partir del elemento DICOM_SR * @param value El Wrapper obtenido */ public DICOM_SR get_DICOM_SR(){  Element el = getElementByTagName("DICOM_SR");   return new DICOM_SR(el); }  }