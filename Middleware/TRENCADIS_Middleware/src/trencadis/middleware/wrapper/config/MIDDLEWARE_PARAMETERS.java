package trencadis.middleware.wrapper.config;/*******************************************************************  *********** CLASE GENERADA AUTOM�TICAMENTE POR XMLWRAPPER **********  ********-----Germ�n Molt� Mart�nez (gmolto@dsic.upv.es) -----*******  ********************************************************************/ import org.w3c.dom.*;/** * Contiene los m�todos que permiten obtener y cambiar la informaci�n * de los elementos <STRONG>MIDDLEWARE_PARAMETERS </STRONG> del documento XML. */public class MIDDLEWARE_PARAMETERS extends Wrapper{/** * Crea un Wrapper que trabajar� a partir de un elemento MIDDLEWARE_PARAMETERS * @param e El elemento sobre el cual trabaja el Wrapper*/public MIDDLEWARE_PARAMETERS(Element e){ super(e);}/** * Obtiene el valor del elemento BASE_PATH * @return El valor del elemento BASE_PATH */public String get_BASE_PATH(){ try { String unparsedValue = getValueByTagName("BASE_PATH"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento BASE_PATH * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento BASE_PATH * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_BASE_PATH(String value){ String unparsedValue = value; try{ setValueByTagName("BASE_PATH", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("BASE_PATH");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento USERCERT * @return El valor del elemento USERCERT */public String get_USERCERT(){ try { String unparsedValue = getValueByTagName("USERCERT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento USERCERT * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento USERCERT * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_USERCERT(String value){ String unparsedValue = value; try{ setValueByTagName("USERCERT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("USERCERT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento USERKEY * @return El valor del elemento USERKEY */public String get_USERKEY(){ try { String unparsedValue = getValueByTagName("USERKEY"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento USERKEY * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento USERKEY * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_USERKEY(String value){ String unparsedValue = value; try{ setValueByTagName("USERKEY", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("USERKEY");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento PATH_CATRUSTCERT * @return El valor del elemento PATH_CATRUSTCERT */public String get_PATH_CATRUSTCERT(){ try { String unparsedValue = getValueByTagName("PATH_CATRUSTCERT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento PATH_CATRUSTCERT * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento PATH_CATRUSTCERT * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_PATH_CATRUSTCERT(String value){ String unparsedValue = value; try{ setValueByTagName("PATH_CATRUSTCERT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("PATH_CATRUSTCERT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento TMP_DIR * @return El valor del elemento TMP_DIR */public String get_TMP_DIR(){ try { String unparsedValue = getValueByTagName("TMP_DIR"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento TMP_DIR * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento TMP_DIR * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_TMP_DIR(String value){ String unparsedValue = value; try{ setValueByTagName("TMP_DIR", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("TMP_DIR");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}}