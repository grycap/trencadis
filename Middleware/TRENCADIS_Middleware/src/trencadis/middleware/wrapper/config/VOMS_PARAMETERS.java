package trencadis.middleware.wrapper.config;/*******************************************************************  *********** CLASE GENERADA AUTOM�TICAMENTE POR XMLWRAPPER **********  ********-----Germ�n Molt� Mart�nez (gmolto@dsic.upv.es) -----*******  ********************************************************************/ import org.w3c.dom.*;/** * Contiene los m�todos que permiten obtener y cambiar la informaci�n * de los elementos <STRONG>VOMS_PARAMETERS </STRONG> del documento XML. */public class VOMS_PARAMETERS extends Wrapper{/** * Crea un Wrapper que trabajar� a partir de un elemento VOMS_PARAMETERS * @param e El elemento sobre el cual trabaja el Wrapper*/public VOMS_PARAMETERS(Element e){ super(e);}/** * Obtiene el valor del elemento HOST * @return El valor del elemento HOST */public String get_HOST(){ try { String unparsedValue = getValueByTagName("HOST"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento HOST * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento HOST * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_HOST(String value){ String unparsedValue = value; try{ setValueByTagName("HOST", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("HOST");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento PORT * @return El valor del elemento PORT */public String get_PORT(){ try { String unparsedValue = getValueByTagName("PORT"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento PORT * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento PORT * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_PORT(String value){ String unparsedValue = value; try{ setValueByTagName("PORT", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("PORT");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento HOSTDN * @return El valor del elemento HOSTDN */public String get_HOSTDN(){ try { String unparsedValue = getValueByTagName("HOSTDN"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento HOSTDN * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento HOSTDN * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_HOSTDN(String value){ String unparsedValue = value; try{ setValueByTagName("HOSTDN", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("HOSTDN");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento VO * @return El valor del elemento VO */public String get_VO(){ try { String unparsedValue = getValueByTagName("VO"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento VO * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento VO * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_VO(String value){ String unparsedValue = value; try{ setValueByTagName("VO", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("VO");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento VOMSES * @return El valor del elemento VOMSES */public String get_VOMSES(){ try { String unparsedValue = getValueByTagName("VOMSES"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento VOMSES * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento VOMSES * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_VOMSES(String value){ String unparsedValue = value; try{ setValueByTagName("VOMSES", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("VOMSES");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}/** * Obtiene el valor del elemento VOMSDIR * @return El valor del elemento VOMSDIR */public String get_VOMSDIR(){ try { String unparsedValue = getValueByTagName("VOMSDIR"); String parsedValue = unparsedValue; return parsedValue; }catch (Exception e) { e.printStackTrace(); return null;}}/** * Asocia un valor al elemento VOMSDIR * Si el elemento no existe, lo crea previamente * @param value El valor a establecer al elemento VOMSDIR * @throws IllegalArgumentException Si el valor incumple alguna *         de las restricciones del schema */public void set_VOMSDIR(String value){ String unparsedValue = value; try{ setValueByTagName("VOMSDIR", unparsedValue); } catch(Exception e) { //Si no existe el elemento lo creamos   Element el = doc.createElement("VOMSDIR");   el.appendChild(doc.createTextNode(unparsedValue));   elem.appendChild(el); }}}